#!/usr/bin/env bash
#
#


#
#std
#
alias cp='cp -i'
alias rm='rm -i'
alias mv='mv -i'
alias ll="ls -laF"
alias ls="ls -aF"
alias cd..='cd ..'
alias md='mkdir -p'

#
###
#
alias hh=history
alias rrc='source ~/.bashrc'
alias grep='egrep -i --color=auto'
alias psg="ps ax | grep \$1"
alias tf="tail -f "
alias tF="tail -F "
alias wshark="wireshark --disable-protocol upld"
alias kd3=kdiff3

#
## git stuff
#
alias g="git"
alias git-symbolic-ref="git symbolic-ref"
alias gb="git branch"
alias gp="git pull"
alias gpr="git pull --rebase"
alias gco="git checkout"
alias gs="git status"
alias grc="git rebase --continue"
alias gf="git fetch"
alias gd="git diff"
alias gds="git diff --staged"
alias gdn="git diff --name-only"
alias gdt="git difftool"
alias gdts="git difftool --staged"
alias gcl="git config -l"
alias gsl="git stash list"
alias g-log="git log --graph --oneline --decorate --abbrev-commit"

#
## Docker
#
#alias dps='docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Status}}"'


#
##
#
alias ee="emacs -nw"
alias ge="geany"
alias stl="systemctl"
alias show_route="netstat -rn"
# rl, dl, are better as functions

#
# Virtualization, Qemu, Etc
#
alias vlist="virsh list"
alias vla="virsh list --all"
alias vc="virsh console"
alias vdump="virsh dumpxml"
alias vDD="virsh destroy"
alias virsh="/root/bin/virsh.sh" ##TODO:Functions
alias qi=qemu-img
alias c="/root/bin/qssh.sh"

#TQ-TODO: https://superuser.com/questions/436314/how-can-i-get-bash-to-perform-tab-completion-for-my-aliases
complete -o default -o nospace -A alias ee


# Automatically add completion for all aliases to commands having completion functions
function alias_completion()
{
    local namespace="alias_completion"

    # parse function based completion definitions, where capture group 2 => function and 3 => trigger
    local compl_regex='complete( +[^ ]+)* -F ([^ ]+) ("[^"]+"|[^ ]+)'
    # parse alias definitions, where capture group 1 => trigger, 2 => command, 3 => command arguments
    local alias_regex="alias ([^=]+)='(\"[^\"]+\"|[^ ]+)(( +[^ ]+)*)'"

    # create array of function completion triggers, keeping multi-word triggers together
    eval "local completions=($(complete -p | sed -Ene "/$compl_regex/s//'\3'/p"))"
    (( ${#completions[@]} == 0 )) && return 0

    # create temporary file for wrapper functions and completions
    rm -f "/tmp/${namespace}-*.tmp" # preliminary cleanup
    local tmp_file; tmp_file="$(mktemp "/tmp/${namespace}-${RANDOM}XXX.tmp")" || return 1

    local completion_loader; completion_loader="$(complete -p -D 2>/dev/null | sed -Ene 's/.* -F ([^ ]*).*/\1/p')"

    # read in "<alias> '<aliased command>' '<command args>'" lines from defined aliases
    local line; while read line; do
        eval "local alias_tokens; alias_tokens=($line)" 2>/dev/null || continue # some alias arg patterns cause an eval parse error
        local alias_name="${alias_tokens[0]}" alias_cmd="${alias_tokens[1]}" alias_args="${alias_tokens[2]# }"

        # skip aliases to pipes, boolean control structures and other command lists
        # (leveraging that eval errs out if $alias_args contains unquoted shell metacharacters)
        eval "local alias_arg_words; alias_arg_words=($alias_args)" 2>/dev/null || continue
        # avoid expanding wildcards
        read -a alias_arg_words <<< "$alias_args"

        # skip alias if there is no completion function triggered by the aliased command
        if [[ ! " ${completions[*]} " =~ " $alias_cmd " ]]; then
            if [[ -n "$completion_loader" ]]; then
                # force loading of completions for the aliased command
                eval "$completion_loader $alias_cmd"
                # 124 means completion loader was successful
                [[ $? -eq 124 ]] || continue
                completions+=($alias_cmd)
            else
                continue
            fi
        fi
        local new_completion="$(complete -p "$alias_cmd")"

        # create a wrapper inserting the alias arguments if any
        if [[ -n $alias_args ]]; then
            local compl_func="${new_completion/#* -F /}"; compl_func="${compl_func%% *}"
            # avoid recursive call loops by ignoring our own functions
            if [[ "${compl_func#_$namespace::}" == $compl_func ]]; then
                local compl_wrapper="_${namespace}::${alias_name}"
                    echo "function $compl_wrapper {
                        (( COMP_CWORD += ${#alias_arg_words[@]} ))
                        COMP_WORDS=($alias_cmd $alias_args \${COMP_WORDS[@]:1})
                        (( COMP_POINT -= \${#COMP_LINE} ))
                        COMP_LINE=\${COMP_LINE/$alias_name/$alias_cmd $alias_args}
                        (( COMP_POINT += \${#COMP_LINE} ))
                        $compl_func
                    }" >> "$tmp_file"
                    new_completion="${new_completion/ -F $compl_func / -F $compl_wrapper }"
            fi
        fi

        # replace completion trigger by alias
        new_completion="${new_completion% *} $alias_name"
        echo "$new_completion" >> "$tmp_file"
    done < <(alias -p | sed -Ene "s/$alias_regex/\1 '\2' '\3'/p")
    source "$tmp_file" && rm -f "$tmp_file"
}

